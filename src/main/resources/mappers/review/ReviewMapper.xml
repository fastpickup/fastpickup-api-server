<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- ReviewMapper Xml -->
<mapper namespace="com.project.fastpickup.admin.review.mappers.ReviewMapper">
   

   <!-- 맴버 리뷰 작성 -->
   <insert id ="registReview">

    insert into tbl_review(sno, ono ,email, reviewTitle, reviewContent) 
            values (#{sno}, #{ono}, #{email}, #{reviewTitle}, #{reviewContent})
            
        <selectKey resultType="long" keyProperty="rno" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>

   </insert>

  <!-- 맴버 리뷰는 rno = gno -->
  <update id="updateGno">
      update tbl_review set gno = #{rno} where rno = #{rno}
  </update>

  <!-- END 맴버 리뷰 작성 -->

   <!-- 맴버 리뷰 리스트 -->
   <select id = "getReviewMemberList" resultType="com.project.fastpickup.admin.review.dto.ReviewListDTO">

        select r.rno, o.ono , s.sno, s.storeName, p.pno, p.productName, concat(i.uuid,'_',i.fileName) as reviewImg, reviewTitle ,r.email, r.reviewDate, r.isDeleted 
            from tbl_review r left outer join tbl_store s on r.sno = s.sno
		    left outer join tbl_order o on r.ono = o.ono
		    left outer join tbl_member m on m.email = o.email
		    left outer join tbl_product p on o.pno = p.pno
		    left outer join tbl_review_img i on r.rno = i.rno
        where r.rno = r.gno and r.isDeleted = false and r.email = #{email} and (i.ord = 0 or i.ord is null) and r.rno>0

            <if test="pr.keyword != null and pr.types != null">
              <trim prefix="and (" prefixOverrides="or" suffix=")">
                <foreach collection="pr.types" item="type" separator=" or ">
                  <if test='type == "p"'>
                    p.productName like concat('%', #{pr.keyword}, '%')
                  </if>
                  <if test='type == "s"'>
                    s.storeName like concat('%', #{pr.keyword}, '%')
                  </if>
                  <if test='type == "t"'>
                    r.reviewTitle like concat('%', #{pr.keyword}, '%')
                  </if>
                </foreach>
              </trim>
            </if>

        order by r.reviewDate desc
        limit #{pr.skip}, #{pr.size}

   </select>

    <!-- 페이지를 위한 카운트 -->
   <select id ="reviewMemberListCount" resultType = "int">
      select count(*) from
        (select r.rno, o.ono , s.sno, s.storeName, p.pno, p.productName, concat(i.uuid,'_',i.fileName) as reviewImg,reviewTitle ,r.email, r.reviewDate, r.isDeleted 
            from tbl_review r left outer join tbl_store s on r.sno = s.sno
		    left outer join tbl_order o on r.ono = o.ono
		    left outer join tbl_member m on m.email = o.email
		    left outer join tbl_product p on o.pno = p.pno
		    left outer join tbl_review_img i on r.rno = i.rno
        where r.rno = r.gno and r.isDeleted = false and r.email = #{email} and (i.ord = 0 or i.ord is null) and r.rno>0

            <if test="pr.keyword != null and pr.types != null">
              <trim prefix="and (" prefixOverrides="or" suffix=")">
                <foreach collection="pr.types" item="type" separator=" or ">
                  <if test='type == "p"'>
                    p.productName like concat('%', #{pr.keyword}, '%')
                  </if>
                  <if test='type == "s"'>
                    s.storeName like concat('%', #{pr.keyword}, '%')
                  </if>
                  <if test='type == "t"'>
                    r.reviewTitle like concat('%', #{pr.keyword}, '%')
                  </if>
                </foreach>
              </trim>
            </if>
            limit #{pr.countEnd}) review
   </select>

   <!-- END 맴버 리뷰 리스트 테스트 -->


   <!-- 각 가맹점의 리뷰 리스트 -->
  <select id="getByStoreReview" resultMap = "reviewMap">
    select r.rno,r.gno ,o.ono ,s.sno, s.storeName, p.pno, p.productName, 
           r.email ,r.reviewTitle, r.reviewContent, concat(ri.uuid,'_',ri.fileName) as fileNames, r.reviewDate, r.isDeleted
    from tbl_review r left outer join tbl_store s on r.sno = s.sno
        left outer join tbl_review_img ri on r.rno = ri.rno
		    left outer join tbl_order o on r.ono = o.ono
		    left outer join tbl_member m on m.email = o.email
		    left outer join tbl_product p on o.pno = p.pno
    where s.sno = #{sno} 
    order by r.gno desc, r.rno
    limit #{pr.skip}, #{pr.size}
  </select>

  <select id="getByStoreReviewCnt">
   select count(*) from (
    select r.rno
    from tbl_review r 
      left outer join tbl_store s on r.sno = s.sno
      left outer join tbl_review_img ri on r.rno = ri.rno
      left outer join tbl_order o on r.ono = o.ono
      left outer join tbl_member m on m.email = o.email
      left outer join tbl_product p on o.pno = p.pno
    where s.sno = #{sno} and (ri.ord = 0 or ri.ord is null)
    limit #{pr.countEnd}
  ) review
  </select>

   

   <!-- 맴버 리뷰 상세 -->
      <resultMap id="reviewMap" type="com.project.fastpickup.admin.review.dto.ReviewReadDTO">
        <id property="rno" column="rno"/>
        <result property="ono" column="ono"/>
        <result property="gno" column="gno"/>
        <result property="sno" column="sno"/>
        <result property="storeName" column="storeName"/>
        <result property="pno" column="pno"/>
        <result property="productName" column="productName"/>
        <result property="email" column="email"/>
        <result property="reviewTitle" column="reviewTitle"/>
        <result property="reviewContent" column="reviewContent"/>
        <result property="reviewDate" column="reviewDate"/>
        <result property="isDeleted" column="isDeleted"/>
        <collection property="fileNames" resultMap="reviewFileMap"/>
    </resultMap>

    <resultMap type="string" id="reviewFileMap">
        <result column="fileNames"/>
    </resultMap>

   <select id ="getReviewRead" resultMap ="reviewMap">
      select r.rno,r.gno, o.ono ,s.sno, s.storeName, p.pno, p.productName, r.email, r.reviewTitle, r.reviewContent, concat(ri.uuid,'_',ri.fileName) as fileNames, r.reviewDate, r.isDeleted 
        from tbl_review r left outer join tbl_store s on r.sno = s.sno
		      left outer join tbl_review_img ri on r.rno = ri.rno
		      left outer join tbl_order o on r.ono = o.ono
		      left outer join tbl_member m on m.email = o.email
		      left outer join tbl_product p on o.pno = p.pno
        where r.rno = #{rno} and r.isDeleted = false and r.rno = r.gno
   </select>
  <!-- END 맴버 리뷰 상세 -->

      <!-- 가맹점 리뷰 답글 -->
    <select id="getStoreReview" resultType = "com.project.fastpickup.admin.review.dto.ReviewReadDTO">
    
      select r.rno,r.gno ,o.ono ,s.sno, s.storeName, p.pno, p.productName, r.email ,r.reviewTitle, r.reviewContent, concat(ri.uuid,'_',ri.fileName) as fileNames, r.reviewDate, r.isDeleted
        from tbl_review r left outer join tbl_store s on r.sno = s.sno
		      left outer join tbl_review_img ri on r.rno = ri.rno
		      left outer join tbl_order o on r.ono = o.ono
		      left outer join tbl_member m on m.email = o.email
		      left outer join tbl_product p on o.pno = p.pno
        where r.gno = #{rno} and r.isDeleted = false and r.rno != r.gno
        order by r.rno desc; 

    </select>
    <!-- 가맹점 리뷰 답글 -->



  <!-- 리뷰 삭제 -->
  <update id ="removeReview">
    update tbl_review set isDeleted = true, reviewTitle='삭제된 리뷰 입니다.', reviewContent='삭제된 리뷰 입니다.' where rno = #{rno}
  </update>
  <!-- END 리뷰 삭제 -->

  <!-- 리뷰 수정 -->
  <update id = "updateReveiw">
    update tbl_review set reviewContent = #{reviewContent}, reviewTitle = #{reviewTitle}
    where rno = #{rno}
  </update>


</mapper>